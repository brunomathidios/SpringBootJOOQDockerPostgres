/*
 * This file is generated by jOOQ.
 */
package br.com.mathidios.springboot.jooq.docker.postgres.model.jooq.tables;


import br.com.mathidios.springboot.jooq.docker.postgres.model.jooq.Indexes;
import br.com.mathidios.springboot.jooq.docker.postgres.model.jooq.Keys;
import br.com.mathidios.springboot.jooq.docker.postgres.model.jooq.Public;
import br.com.mathidios.springboot.jooq.docker.postgres.model.jooq.tables.records.DeliveryOrderRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeliveryOrder extends TableImpl<DeliveryOrderRecord> {

    private static final long serialVersionUID = -306516217;

    /**
     * The reference instance of <code>public.delivery_order</code>
     */
    public static final DeliveryOrder DELIVERY_ORDER = new DeliveryOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeliveryOrderRecord> getRecordType() {
        return DeliveryOrderRecord.class;
    }

    /**
     * The column <code>public.delivery_order.id_order</code>.
     */
    public final TableField<DeliveryOrderRecord, Integer> ID_ORDER = createField("id_order", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('delivery_order_id_order_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.delivery_order.id_restaurant</code>.
     */
    public final TableField<DeliveryOrderRecord, Integer> ID_RESTAURANT = createField("id_restaurant", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.delivery_order.id_user</code>.
     */
    public final TableField<DeliveryOrderRecord, Integer> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.delivery_order.in_status_order</code>.
     */
    public final TableField<DeliveryOrderRecord, String> IN_STATUS_ORDER = createField("in_status_order", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.delivery_order.dt_order</code>.
     */
    public final TableField<DeliveryOrderRecord, LocalDateTime> DT_ORDER = createField("dt_order", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.delivery_order.dt_cancel</code>.
     */
    public final TableField<DeliveryOrderRecord, LocalDateTime> DT_CANCEL = createField("dt_cancel", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>public.delivery_order</code> table reference
     */
    public DeliveryOrder() {
        this(DSL.name("delivery_order"), null);
    }

    /**
     * Create an aliased <code>public.delivery_order</code> table reference
     */
    public DeliveryOrder(String alias) {
        this(DSL.name(alias), DELIVERY_ORDER);
    }

    /**
     * Create an aliased <code>public.delivery_order</code> table reference
     */
    public DeliveryOrder(Name alias) {
        this(alias, DELIVERY_ORDER);
    }

    private DeliveryOrder(Name alias, Table<DeliveryOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeliveryOrder(Name alias, Table<DeliveryOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DeliveryOrder(Table<O> child, ForeignKey<O, DeliveryOrderRecord> key) {
        super(child, key, DELIVERY_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DeliveryOrderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DELIVERY_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DeliveryOrderRecord> getPrimaryKey() {
        return Keys.PK_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DeliveryOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<DeliveryOrderRecord>>asList(Keys.PK_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DeliveryOrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DeliveryOrderRecord, ?>>asList(Keys.DELIVERY_ORDER__FK_RESTAURANTE, Keys.DELIVERY_ORDER__FK_USER);
    }

    public DeliveryRestaurant deliveryRestaurant() {
        return new DeliveryRestaurant(this, Keys.DELIVERY_ORDER__FK_RESTAURANTE);
    }

    public DeliveryUser deliveryUser() {
        return new DeliveryUser(this, Keys.DELIVERY_ORDER__FK_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeliveryOrder as(String alias) {
        return new DeliveryOrder(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DeliveryOrder as(Name alias) {
        return new DeliveryOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DeliveryOrder rename(String name) {
        return new DeliveryOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DeliveryOrder rename(Name name) {
        return new DeliveryOrder(name, null);
    }
}
